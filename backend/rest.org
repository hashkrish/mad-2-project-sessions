#+TITLE: API docs
#+AUTHOR: Santhana Krishnan S

* Introduction
This document describes the API for the end to end messaging application.

** API Design
*** API versioning
The API is versioned using with URL path (/api/v1). The current version is v1.
*** API authentication
The API is authenticated using a JWT token. The token is passed in the Authorization header as a Bearer token.
*** API response
The API response is a JSON object. The response contains the following fields:
- status: The status of the request. The value is either ok or error.
- message: The error message. This field is present only if the status is error.

* Config
#+NAME: active_config
#+BEGIN_SRC sh
echo develop
#+END_SRC

** Base URL
#+NAME: base_url
#+BEGIN_SRC sh
echo http://localhost:5000/api/v1
#+END_SRC

** API key
#+NAME: api_key
#+BEGIN_SRC sh
# echo eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImtyaXNobmFuIiwiZXhwIjoxNzA2NzIyMjc3fQ.7XW4crcORQ43XgziqN1VFKvYtdQJ6Dwa49K3yGuwT8o # krishnan # admin
echo eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImtyaXNobmFuIiwiZXhwIjoxNzA2NzI0MDA4fQ.31KUiPbimy6BYZaQosm0sr3cMvS_jTTrQzLYcTItk-k # santhanam # messenger
#+END_SRC

** User ID
#+NAME: user_id
#+BEGIN_SRC sh
echo 1
#+END_SRC

** Message ID
#+NAME: message_id
#+BEGIN_SRC sh
echo 1
#+END_SRC

** Role ID
#+NAME: role_id
#+BEGIN_SRC sh
echo -1
#+END_SRC
** User role ID
#+NAME: user_role_id
#+BEGIN_SRC sh
echo -1
#+END_SRC
** Access ID
#+NAME: access_id
#+BEGIN_SRC sh
echo -1
#+END_SRC
* API
** Status
#+BEGIN_SRC restclient :var base_url=base_url
GET :base_url/status
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "status": "ok"
}

// GET http://localhost:5000/api/v1/status
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 18:35:57 GMT
// Content-Type: application/json
// Content-Length: 21
// Connection: close
// Request duration: 0.105538s
#+END_SRC

** User
*** Create user
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
POST :base_url/users
Authorization: Bearer :api_key
Content-Type: application/json

{
  "username": "santhanam",
  "email": "a@a.com",
  "password": "password"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 2,
  "username": "santhanam",
  "email": "a@a.com",
  "active": true
}

// POST http://localhost:5000/api/v1/users
// HTTP/1.1 201 CREATED
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 19:57:34 GMT
// Content-Type: application/json
// Content-Length: 89
// Connection: close
// Request duration: 0.073997s
#+END_SRC

*** List users
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
GET :base_url/users
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "message": {
    "error": "User santhanam doesn't have access to GET /api/v1/users"
  }
}

// GET http://localhost:5000/api/v1/users
// HTTP/1.1 403 FORBIDDEN
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 16:55:59 GMT
// Content-Type: application/json
// Content-Length: 94
// Connection: close
// Request duration: 0.016900s
#+END_SRC

*** Get user
#+BEGIN_SRC restclient :var base_url=base_url :var api_key=api_key id=user_id
GET :base_url/user/:id
Authorization: Bearer :api_key
#+END_SRC

*** Update user
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=user_id
PUT :base_url/user/:id
Authorization: Bearer :api_key
Content-Type: application/json

{
  "username": "krishnan",
  "password": "password",
  "email": "b@a.com"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "username": "krishnan",
  "email": "b@a.com",
  "active": true
}

// PUT http://localhost:5000/api/v1/user/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 19:13:53 GMT
// Content-Type: application/json
// Content-Length: 88
// Connection: close
// Request duration: 0.053669s
#+END_SRC

*** Delete user
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=user_id
DELETE :base_url/user/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "username": "santhanam2",
  "email": "c@c.com",
  "active": true
}

// DELETE http://localhost:5000/api/v1/user/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 18:53:58 GMT
// Content-Type: application/json
// Content-Length: 90
// Connection: close
// Request duration: 0.041243s
#+END_SRC

** Message
*** Create message
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
POST :base_url/messages
Authorization: Bearer :api_key
Content-Type: application/json


{
  "sender_id": 1,
  "receiver_id": 2,
  "text": "Hello world"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 23,
  "sender_id": 1,
  "receiver_id": 2,
  "text": "Hello world",
  "timestamp": "2024-01-31 17:49:47"
}

// POST http://localhost:5000/api/v1/messages
// HTTP/1.1 201 CREATED
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:49:48 GMT
// Content-Type: application/json
// Content-Length: 126
// Connection: close
// Request duration: 0.039766s
#+END_SRC

*** List messages
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
GET :base_url/messages?per_page=10&page=1
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
[
  {
    "id": 2,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 22:58:45"
  },
  {
    "id": 3,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:55"
  },
  {
    "id": 4,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:55"
  },
  {
    "id": 5,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:56"
  },
  {
    "id": 6,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:56"
  },
  {
    "id": 7,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:56"
  },
  {
    "id": 8,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:57"
  },
  {
    "id": 9,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:57"
  },
  {
    "id": 10,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:57"
  },
  {
    "id": 11,
    "sender_id": 1,
    "receiver_id": 2,
    "text": "Hello world",
    "timestamp": "2024-01-30 23:05:58"
  }
]

// GET http://localhost:5000/api/v1/messages?per_page=10&page=1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:49:55 GMT
// Content-Type: application/json
// Content-Length: 1545
// Connection: close
// Request duration: 0.022698s
#+END_SRC

*** Get message
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=message_id
GET :base_url/message/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "message": {
    "error": "Not Found"
  }
}

// GET http://localhost:5000/api/v1/message/1
// HTTP/1.1 404 NOT FOUND
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:49:57 GMT
// Content-Type: application/json
// Content-Length: 48
// Connection: close
// Request duration: 0.021582s
#+END_SRC

*** Update message
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=message_id
PUT :base_url/message/:id
Authorization: Bearer :api_key
Content-Type: application/json


{
  "sender_id": 1,
  "receiver_id": 2,
  "text": "Hello world #1"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "sender_id": 1,
  "receiver_id": 2,
  "text": "Hello world #1",
  "timestamp": "2024-01-30 22:56:16"
}

// PUT http://localhost:5000/api/v1/message/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:13:17 GMT
// Content-Type: application/json
// Content-Length: 128
// Connection: close
// Request duration: 0.048326s
#+END_SRC

*** Delete message
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=message_id
DELETE :base_url/message/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "sender_id": 1,
  "receiver_id": 2,
  "text": "Hello world #1",
  "timestamp": "2024-01-30 22:56:16"
}

// DELETE http://localhost:5000/api/v1/message/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:13:20 GMT
// Content-Type: application/json
// Content-Length: 128
// Connection: close
// Request duration: 0.042227s
#+END_SRC

** Role
*** Create role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
POST :base_url/roles
Authorization: Bearer :api_key
Content-Type: application/json


{
  "name": "messenger",
  "description": "A messenger role with CRUD access to message"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 3,
  "name": "messenger",
  "description": "A messenger role with CRUD access to message"
}

// POST http://localhost:5000/api/v1/roles
// HTTP/1.1 201 CREATED
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 16:46:52 GMT
// Content-Type: application/json
// Content-Length: 108
// Connection: close
// Request duration: 0.049082s
#+END_SRC

*** List roles
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
GET :base_url/roles
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
[
  {
    "id": 1,
    "name": "admin",
    "description": "Admin role"
  },
  {
    "id": 2,
    "name": "individual",
    "description": "Individual user"
  },
  {
    "id": 3,
    "name": "messenger",
    "description": "A messenger role with CRUD access to message"
  }
]

// GET http://localhost:5000/api/v1/roles
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 16:47:47 GMT
// Content-Type: application/json
// Content-Length: 324
// Connection: close
// Request duration: 0.017758s
#+END_SRC

*** Get role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=role_id
GET :base_url/role/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "name": "admin",
  "description": "Admin to have all access"
}

// GET http://localhost:5000/api/v1/role/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 23:29:15 GMT
// Content-Type: application/json
// Content-Length: 84
// Connection: close
// Request duration: 0.026275s
#+END_SRC

*** Update role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=role_id
PUT :base_url/role/:id
Authorization: Bearer :api_key
Content-Type: application/json


{
  "name": "admin",
  "description": "Admin role"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "name": "admin",
  "description": "Admin role"
}

// PUT http://localhost:5000/api/v1/role/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 23:29:25 GMT
// Content-Type: application/json
// Content-Length: 70
// Connection: close
// Request duration: 0.051054s
#+END_SRC

*** Delete role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=role_id
DELETE :base_url/role/100000
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 3,
  "name": "group",
  "description": "Group user"
}

// DELETE http://localhost:5000/api/v1/role/3
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 23:29:40 GMT
// Content-Type: application/json
// Content-Length: 70
// Connection: close
// Request duration: 0.049240s
#+END_SRC

** User role
*** Create user role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
POST :base_url/user/roles
Authorization: Bearer :api_key
Content-Type: application/json


{
  "user_id": 2,
  "role_id": 3
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 3,
  "user_id": 2,
  "role_id": 3
}

// POST http://localhost:5000/api/v1/user/roles
// HTTP/1.1 201 CREATED
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 16:47:33 GMT
// Content-Type: application/json
// Content-Length: 52
// Connection: close
// Request duration: 0.049391s
#+END_SRC

*** List user Roles
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
GET :base_url/user/roles
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "message": {
    "error": "User santhanam doesn't have access to GET /api/v1/user/roles"
  }
}

// GET http://localhost:5000/api/v1/user/roles
// HTTP/1.1 403 FORBIDDEN
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 16:55:42 GMT
// Content-Type: application/json
// Content-Length: 99
// Connection: close
// Request duration: 0.020831s
#+END_SRC

*** Get user role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=user_role_id
GET :base_url/user/role/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "user_id": 1,
  "role_id": 1
}

// GET http://localhost:5000/api/v1/user/role/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 23:41:15 GMT
// Content-Type: application/json
// Content-Length: 52
// Connection: close
// Request duration: 0.024057s
#+END_SRC

*** Update user role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=user_role_id
PUT :base_url/user/role/:id
Authorization: Bearer :api_key
Content-Type: application/json


{
  "user_id": 1,
  "role_id": 1
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 1,
  "user_id": 1,
  "role_id": 1
}

// PUT http://localhost:5000/api/v1/user/role/1
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Tue, 30 Jan 2024 23:41:27 GMT
// Content-Type: application/json
// Content-Length: 52
// Connection: close
// Request duration: 0.023882s
#+END_SRC

*** Delete user role
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=user_role_id
DELETE :base_url/user/role/:id
Authorization: Bearer :api_key
#+END_SRC

** Access
*** Create access
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
POST :base_url/accesses
Authorization: Bearer :api_key
Content-Type: application/json


{
  "role_id": 3,
  "resource": ".*/messages$"
  "action": "list"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "message": {
    "error": "Bad Request"
  }
}

// POST http://localhost:5000/api/v1/accesses
// HTTP/1.1 400 BAD REQUEST
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:10:05 GMT
// Content-Type: application/json
// Content-Length: 50
// Connection: close
// Request duration: 0.027042s
#+END_SRC

*** List accesses
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
GET :base_url/accesses
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
[
  {
    "id": 1,
    "role_id": 1,
    "resource": ".*",
    "action": "create"
  },
  {
    "id": 2,
    "role_id": 1,
    "resource": ".*",
    "action": "read"
  },
  {
    "id": 3,
    "role_id": 1,
    "resource": ".*",
    "action": "update"
  },
  {
    "id": 4,
    "role_id": 1,
    "resource": ".*",
    "action": "delete"
  },
  {
    "id": 5,
    "role_id": 3,
    "resource": ".*/messages$",
    "action": "create"
  },
  {
    "id": 6,
    "role_id": 3,
    "resource": ".*/message/[0-9]+$",
    "action": "read"
  },
  {
    "id": 7,
    "role_id": 3,
    "resource": ".*/message/[0-9]+$",
    "action": "update"
  },
  {
    "id": 8,
    "role_id": 3,
    "resource": ".*/message/[0-9]+$",
    "action": "delete"
  },
  {
    "id": 9,
    "role_id": 3,
    "resource": ".*/messages$",
    "action": "list"
  }
]

// GET http://localhost:5000/api/v1/accesses
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:12:19 GMT
// Content-Type: application/json
// Content-Length: 1010
// Connection: close
// Request duration: 0.018660s
#+END_SRC

*** Get access
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=access_id
GET :base_url/access/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC html
<!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

<!-- GET http://localhost:5000/api/v1/access/-1 -->
<!-- HTTP/1.1 404 NOT FOUND -->
<!-- Server: Werkzeug/3.0.1 Python/3.11.6 -->
<!-- Date: Wed, 31 Jan 2024 16:44:15 GMT -->
<!-- Content-Type: text/html; charset=utf-8 -->
<!-- Content-Length: 207 -->
<!-- Connection: close -->
<!-- Request duration: 0.011118s -->
#+END_SRC

*** Update access
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=access_id
PUT :base_url/access/9
Authorization: Bearer :api_key
Content-Type: application/json


{
  "role_id": 3,
  "resource": ".*/messages\b.*",
  "action": "read"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 9,
  "role_id": 3,
  "resource": ".*/messages\b.*",
  "action": "read"
}

// PUT http://localhost:5000/api/v1/access/9
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:18:52 GMT
// Content-Type: application/json
// Content-Length: 91
// Connection: close
// Request duration: 0.167263s
#+END_SRC

*** Delete access
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key id=access_id
DELETE :base_url/access/:id
Authorization: Bearer :api_key
#+END_SRC

#+RESULTS:
#+BEGIN_SRC html
<!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

<!-- DELETE http://localhost:5000/api/v1/access/ -->
<!-- HTTP/1.1 404 NOT FOUND -->
<!-- Server: Werkzeug/3.0.1 Python/3.11.6 -->
<!-- Date: Wed, 31 Jan 2024 16:43:56 GMT -->
<!-- Content-Type: text/html; charset=utf-8 -->
<!-- Content-Length: 207 -->
<!-- Connection: close -->
<!-- Request duration: 0.013624s -->
#+END_SRC

** Auth
*** Login
#+BEGIN_SRC restclient :var base_url=base_url api_key=api_key
POST http://127.0.0.1:5000/login
Content-Type: application/json


{
  "username": "krishnan",
  "password": "password"
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImtyaXNobmFuIiwiZXhwIjoxNzA2NzI0MDA4fQ.31KUiPbimy6BYZaQosm0sr3cMvS_jTTrQzLYcTItk-k",
  "status": "ok"
}

// POST http://127.0.0.1:5000/login
// HTTP/1.1 200 OK
// Server: Werkzeug/3.0.1 Python/3.11.6
// Date: Wed, 31 Jan 2024 17:30:08 GMT
// Content-Type: application/json
// Content-Length: 169
// Connection: close
// Request duration: 0.019310s
#+END_SRC
